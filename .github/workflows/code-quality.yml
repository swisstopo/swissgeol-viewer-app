name: Code Quality

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - "**"
      - "!main"

env:
  NODE_VERSION: "22.x"
  RUST_VERSION: "1.73"
  DATABASE_URL: "postgres://www-data:www-data@localhost:15432/swissgeol-local"

jobs:
#  add_review_links:
#    runs-on: ubuntu-22.04
#    timeout-minutes: 3
#    steps:
#      - uses: actions/checkout@v4
#      - name: Add review links
#        env:
#          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
#        run: scripts/github_add_link_for_reviews.sh

  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Review Dependencies
        uses: actions/dependency-review-action@v4


  install-ui:
    name: "Install UI"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: "${{ runner.os }}-npm-${{ env.NODE_VERSION }}-${{ hashFiles('./ui/package-lock.json') }}"
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ./ui/node_modules
          key: "${{ runner.os }}-node_modules-${{ env.NODE_VERSION }}-${{ hashFiles('./ui/package-lock.json') }}"
          restore-keys: |
            ${{ runner.os }}-node_modules-
      - name: Install node dependencies
        run: cd ui && npm install


  typecheck-ui:
    name: "Type-check UI"
    runs-on: ubuntu-latest
    needs:
      - install-ui
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cached node modules
        uses: actions/cache/restore@v4
        with:
          path: ./ui/node_modules
          key: "${{ runner.os }}-node_modules-${{ env.NODE_VERSION }}-${{ hashFiles('./ui/package-lock.json') }}"
      #      - name: Reset nx
      #        run: npx nx reset
      - name: Run build
        run: cd ui && npm run check


  test-ui:
    name: "Test UI"
    runs-on: ubuntu-latest
    needs:
      - typecheck-ui
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cached node modules
        uses: actions/cache/restore@v4
        with:
          path: ./ui/node_modules
          key: "${{ runner.os }}-node_modules-${{ env.NODE_VERSION }}-${{ hashFiles('./ui/package-lock.json') }}"
      - name: Run tests
        run: cd ui && npm run test


  lint-ui:
    name: "Lint UI"
    runs-on: ubuntu-latest
    needs:
      - typecheck-ui
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cached node modules
        uses: actions/cache/restore@v4
        with:
          path: ./ui/node_modules
          key: "${{ runner.os }}-node_modules-${{ env.NODE_VERSION }}-${{ hashFiles('./ui/package-lock.json') }}"
      - name: Run lint
        run: cd ui && npm run lint


  install-api:
    name: "Install API"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          profile: minimal
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo_registry-${{ env.RUST_VERSION }}-${{ hashFiles('./api/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo_registry-
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo_index-${{ env.RUST_VERSION }}-${{ hashFiles('./api/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo_index-
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: ./api/target
          key: ${{ runner.os }}-cargo_build-${{ env.RUST_VERSION }}-${{ hashFiles('./api/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo_build-
      - name: Cache sqlx binary
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/sqlx
          key: ${{ runner.os }}-sqlx-${{ env.RUST_VERSION }}-${{ hashFiles('./api/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sqlx-
      - name: Start DB
        run:
          docker compose up -d db
          sleep 10
      - name: Setup DB
        run: |
          cd api
          cargo install sqlx-cli --version 0.7.3 --no-default-features --features native-tls,postgres --locked --quiet
          sqlx database create
          sqlx migrate run

      - name: Cache db data
        uses: actions/upload-artifact@v4
        with:
          name: db
          path: /var/lib/docker/volumes/${{ github.workspace }}_db


  lint-api:
    name: "Lint API"
    runs-on: ubuntu-latest
    needs:
      - install-api
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          profile: minimal
          override: true
      - name: Cache cargo registry
        uses: actions/cache/restore@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo_registry-${{ env.RUST_VERSION }}-${{ hashFiles('./api/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache/restore@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo_index-${{ env.RUST_VERSION }}-${{ hashFiles('./api/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache/restore@v4
        with:
          path: ./api/target
          key: ${{ runner.os }}-cargo_build-${{ env.RUST_VERSION }}-${{ hashFiles('./api/Cargo.lock') }}
      - name: Cache sqlx binary
        uses: actions/cache/restore@v4
        with:
          path: ~/.cargo/bin/sqlx
          key: ${{ runner.os }}-sqlx-${{ env.RUST_VERSION }}-${{ hashFiles('./api/Cargo.lock') }}

      - name: Run rustfmt
        run: |
          cd api
          rustup component add rustfmt
          cargo fmt --check
      - name: Run clippy
        run: |
          cd api
          rustup component add clippy
          cargo clippy --offline --frozen --locked
  test-api:
    runs-on: ubuntu-latest
    needs:
      - install-api
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.73
          profile: minimal
          override: true

      - name: Restore cached cargo registry
        uses: actions/cache/restore@v4
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ runner.os }}-${{ hashFiles('./api/Cargo.lock') }}
          restore-keys: |
            cargo-registry-${{ runner.os }}-

      - name: Restore cached cargo index
        uses: actions/cache/restore@v4
        with:
          path: ~/.cargo/git
          key: cargo-index-${{ runner.os }}-${{ hashFiles('./api/Cargo.lock') }}
          restore-keys: |
            cargo-index-${{ runner.os }}-

      - name: Restore cached cargo build
        uses: actions/cache/restore@v4
        with:
          path: target
          key: cargo-build-${{ runner.os }}-${{ hashFiles('./api/Cargo.lock') }}
          restore-keys: |
            cargo-build-${{ runner.os }}-

      - name: Restore cached sqlx binary
        uses: actions/cache/restore@v4
        with:
          path: ~/.cargo/bin/sqlx
          key: sqlx-${{ runner.os }}-${{ hashFiles('./api/Cargo.lock') }}
          restore-keys: |
            sqlx-${{ runner.os }}-

#      - name: Install Rust dependencies
#        env:
#          DATABASE_URL: "postgres://www-data:www-data@localhost:15432/swissgeol-local"
#        run: |
#          docker compose up -d db
#          sleep 10
#          cd api
#          sqlx database create
#          sqlx migrate run
      - name: Run test
        run: |
          docker compose up -d api
          sleep 10
          cd api
          docker compose exec api cargo test --offline

  build-api:
    runs-on: ubuntu-latest
    needs:
#      - test-api
#      - format-api
      - install-api
      - dependency-review
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.73
          profile: minimal
          override: true

      - name: Restore cached cargo registry
        uses: actions/cache/restore@v4
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ runner.os }}-${{ hashFiles('./api/Cargo.lock') }}
          restore-keys: |
            cargo-registry-${{ runner.os }}-

      - name: Restore cached cargo index
        uses: actions/cache/restore@v4
        with:
          path: ~/.cargo/git
          key: cargo-index-${{ runner.os }}-${{ hashFiles('./api/Cargo.lock') }}
          restore-keys: |
            cargo-index-${{ runner.os }}-

      - name: Restore cached cargo build
        uses: actions/cache/restore@v4
        with:
          path: target
          key: cargo-build-${{ runner.os }}-${{ hashFiles('./api/Cargo.lock') }}
          restore-keys: |
            cargo-build-${{ runner.os }}-

      - name: Restore cached sqlx binary
        uses: actions/cache/restore@v4
        with:
          path: ~/.cargo/bin/sqlx
          key: sqlx-${{ runner.os }}-${{ hashFiles('./api/Cargo.lock') }}
          restore-keys: |
            sqlx-${{ runner.os }}-

      - name: Install Rust dependencies
        env:
          DATABASE_URL: "postgres://www-data:www-data@localhost:15432/swissgeol-local"
        run: |
          docker compose up -d db 
          sleep 10 
          cd api 
#          sqlx database create
#          sqlx migrate run
      - name: Build API
        env:
          S3_AWS_REGION: eu-west-1
          AWS_ACCESS_KEY_ID: minio
          AWS_SECRET_ACCESS_KEY: minio123
          S3_BUCKET: ngmpub-userdata-local
          PROJECTS_S3_BUCKET: ngmpub-project-files-local
          S3_ENDPOINT: http://minio:9000
          COGNITO_CLIENT_ID: 10h1tga4i933buv25lelalmtrn
          COGNITO_POOL_ID: eu-west-1_dbfEb2FuH
          PGUSER: www-data
          PGPASSWORD: www-data
          PGDATABASE: swissgeol-local
          PGHOST: db
          PGPORT: "5432"
          APP_PORT: "3000"
          SQLX_OFFLINE: "true"
          DATABASE_URL: "postgres://www-data:www-data@db:5432/swissgeol-local"
        run: |
          apt update && apt install -y musl-tools musl-dev musl-gcc
          rustup target add x86_64-unknown-linux-musl
          cd api
          cargo build --target x86_64-unknown-linux-musl
          
      
  cleanup:
    runs-on: ubuntu-latest
    needs:
      - build-api
      - lint-ui
      - test-ui
    if: always()
    steps:
      - name: Find DB Artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          artifact_name="db"
          artifacts=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts")
          artifact_id=$(echo "$artifacts" | jq -r ".artifacts[] | select(.name==\"$artifact_name\") | .id")
          echo "artifact_id=$artifact_id" >> $GITHUB_ENV

      - name: Delete DB Artifact
        if: {{ env.artifact_id != "" }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ env.artifact_id }}"